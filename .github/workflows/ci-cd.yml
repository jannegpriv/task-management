name: CI/CD

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: test_taskmanagement
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name postgres
          --hostname postgres

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..10}; do
            if docker exec postgres pg_isready -U ${{ secrets.DB_USER }} -d test_taskmanagement; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... Attempt $i"
            sleep 5
          done

      - name: Debug network configuration
        run: |
          echo "Checking network configuration..."
          ping -c 1 postgres
          nslookup postgres
          netstat -an | grep 5432

      - name: Run tests
        env:
          CI: true
          DATABASE_URL: postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/test_taskmanagement
        run: |
          echo "Testing database connection..."
          echo "Database URL: $DATABASE_URL"
          python -c "
          import os
          import psycopg2
          print(f'CI environment: {os.getenv(\"CI\")}')
          print(f'Database URL: {os.getenv(\"DATABASE_URL\")}')
          conn = psycopg2.connect(os.getenv('DATABASE_URL'))
          print('Connection successful!')
          conn.close()
          "
          pytest

  build-and-push:
    if: |
      success() && (
        startsWith(github.ref, 'refs/tags/v') ||
        github.ref == 'refs/heads/main'
      )
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Docker tags
        id: docker_meta
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # For tag pushes, use both latest and version tag
            echo "tags=$REGISTRY/$IMAGE_NAME:latest,$REGISTRY/$IMAGE_NAME:${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            # For main branch pushes, use latest and commit SHA
            echo "tags=$REGISTRY/$IMAGE_NAME:latest,$REGISTRY/$IMAGE_NAME:sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || git rev-parse --short HEAD)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}